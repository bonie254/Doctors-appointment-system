
# Generated by CodiumAI

import pytest

class TestHome:

    # Returns a rendered template for the home page
    def test_returns_rendered_template(self):
        with app.test_client() as client:
            response = client.get('/')
            assert response.status_code == 200
            assert b'<!DOCTYPE html>' in response.data
            assert b'<title>Home</title>' in response.data

    # None
    def test_none(self):
        with app.test_client() as client:
            response = client.get('/')
            assert response.data is None

    # The rendered template contains the correct HTML elements and classes
    def test_correct_html_elements_and_classes(self):
        with app.test_client() as client:
            response = client.get('/')
            assert b'<h1>Welcome to the Home Page</h1>' in response.data
            assert b'<p class="description">This is the home page of the website.</p>' in response.data

    # The function handles errors gracefully and returns an appropriate error message
    def test_handles_errors_gracefully(self):
        with app.test_client() as client:
            response = client.get('/invalid_url')
            assert response.status_code == 404
            assert b'Page Not Found' in response.data

    # None
    def test_none_2(self):
        with app.test_client() as client:
            response = client.get('/invalid_url')
            assert response.data is None

    # None
    def test_none_3(self):
        with app.test_client() as client:
            response = client.get('/invalid_url')
            assert response.data is None


class TestRegistration:

    # User fills out all required fields correctly and submits the form
    def test_required_fields_correct(self):
        with app.test_client() as client:
            response = client.post('/registration', data=dict(
                FirstName='John',
                LastName='Doe',
                email='johndoe@example.com',
                phone_number='',
                password='password',
                confirm_password='password'
            ), follow_redirects=True)
            assert b'An account has been created for John' in response.data
            assert b'Success' in response.data
            assert b'Login' in response.data

    # User fills out all fields correctly, including optional fields, and submits the form
    def test_all_fields_correct(self):
        with app.test_client() as client:
            response = client.post('/registration', data=dict(
                FirstName='John',
                LastName='Doe',
                email='johndoe@example.com',
                phone_number='1234567890',
                password='password',
                confirm_password='password'
            ), follow_redirects=True)
            assert b'An account has been created for John' in response.data
            assert b'Success' in response.data
            assert b'Login' in response.data


class TestLogin:

    # Renders the login template with a LoginForm object
    def test_renders_login_template(self):
        response = self.client.get('/Login')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed('login.html')
        self.assertIsInstance(response.context['form'], LoginForm)

    # Validates user input and logs in user if credentials are correct
    def test_validates_user_input_and_logs_in(self):
        response = self.client.post('/Login', data={'email': 'test@example.com', 'password': 'password'}, follow_redirects=True)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed('success.html')

    # Redirects user to the appropriate page after successful login
    def test_redirects_after_successful_login(self):
        response = self.client.post('/Login', data={'email': 'test@example.com', 'password': 'password'}, follow_redirects=False)
        self.assertEqual(response.status_code, 302)
        self.assertEqual(response.location, url_for('success', _external=True))

    # Displays the login form with validation errors if email is not provided
    def test_displays_login_form_with_email_validation_errors(self):
        response = self.client.post('/Login', data={'password': 'password'}, follow_redirects=True)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed('login.html')
        self.assertIn('This field is required.', response.get_data(as_text=True))

    # Displays the login form with validation errors if password is not provided
    def test_displays_login_form_with_password_validation_errors(self):
        response = self.client.post('/Login', data={'email': 'test@example.com'}, follow_redirects=True)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed('login.html')
        self.assertIn('This field is required.', response.get_data(as_text=True))

    # Displays the login form with validation errors if email is invalid
    def test_displays_login_form_with_invalid_email_validation_errors(self):
        response = self.client.post('/Login', data={'email': 'invalid_email', 'password': 'password'}, follow_redirects=True)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed('login.html')
        self.assertIn('Invalid email address.', response.get_data(as_text=True))


class TestAppointment:

    # Renders the appointment.html template with an instance of the AppointmentForm class.
    def test_renders_template_with_form_instance(self):
        with app.test_client() as client:
            response = client.get('/appointment')
            assert response.status_code == 200
            assert b'<form' in response.data
            assert isinstance(response.context['form'], AppointmentForm)

    # Displays the appointment form to the user.
    def test_displays_form_to_user(self):
        with app.test_client() as client:
            response = client.get('/appointment')
            assert response.status_code == 200
            assert b'<form' in response.data

    # Submits the form with invalid data and displays appropriate error messages.
    def test_displays_error_messages_for_invalid_data(self):
        with app.test_client() as client:
            response = client.post('/appointment', data={
                'appointment_date': '',
                'appointment_time': '',
                'email': '',
                'service': '',
                'doctor_name': ''
            })
            assert response.status_code == 200
            assert b'Please enter a valid appointment date' in response.data
            assert b'Please enter a valid appointment time' in response.data
            assert b'Please enter a valid email address' in response.data
            assert b'Please select a service' in response.data

    # Submits the form with valid data and redirects to a success page.
    def test_redirects_to_success_page_for_valid_data(self):
        with app.test_client() as client:
            response = client.post('/appointment', data={
                'appointment_date': '2022-01-01',
                'appointment_time': '10:00',
                'email': 'test@example.com',
                'service': 'teeth removal',
                'doctor_name': 'Dr. Smith'
            }, follow_redirects=True)
            assert response.status_code == 200
            assert b'Success!' in response.data

    # Submits the form with valid data and saves the appointment to the database.
    def test_saves_appointment_to_database_for_valid_data(self):
        with app.test_client() as client:
            response = client.post('/appointment', data={
                'appointment_date': '2022-01-01',
                'appointment_time': '10:00',
                'email': 'test@example.com',
                'service': 'teeth removal',
                'doctor_name': 'Dr. Smith'
            }, follow_redirects=True)
            assert response.status_code == 200
            # Check if the appointment is saved to the database
            assert Appointment.query.filter_by(email='test@example.com').first() is not None

    # The form contains a field for selecting a service.
    def test_form_contains_service_field(self):
        with app.test_client() as client:
            response = client.get('/appointment')
            assert response.status_code == 200
            assert b'<select' in response.data
            assert b'teeth removal' in response.data



class TestDoctors:

    # Renders the 'doctors.html' template with a new instance of the 'DoctorsRegistration' form.
    def test_renders_template_with_new_instance_of_form(self):
        response = self.client.get('/doctors')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed('doctors.html')
        self.assertIsInstance(response.context['form'], DoctorsRegistration)

    # Displays the form with all fields and choices.
    def test_displays_form_with_fields_and_choices(self):
        response = self.client.get('/doctors')
        self.assertContains(response, 'Qualification')
        self.assertContains(response, 'Specialisation')
        self.assertContains(response, 'license_number')
        self.assertContains(response, 'working_hours')
        self.assertContains(response, 'availability')
        self.assertContains(response, 'Short_description')

    # Submits the form with valid data and redirects to a success page.
    def test_submits_form_with_valid_data_and_redirects_to_success_page(self):
        response = self.client.post('/doctors', data={
            'Qualification': 'Doctor',
            'Specialisation': 'dematologist',
            'license_number': '12345',
            'working_hours': '8-10',
            'availability': 'available',
            'Short_description': 'Lorem ipsum dolor sit amet'
        })
        self.assertEqual(response.status_code, 302)
        self.assertRedirects(response, '/success')

    # Submits the form with invalid license number and displays error message.
    def test_submits_form_with_invalid_license_number_and_displays_error_message(self):
        response = self.client.post('/doctors', data={
            'Qualification': 'Doctor',
            'Specialisation': 'dematologist',
            'license_number': '',
            'working_hours': '8-10',
            'availability': 'available',
            'Short_description': 'Lorem ipsum dolor sit amet'
        })
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'This field is required.')

    # Submits the form with invalid working hours and displays error message.
    def test_submits_form_with_invalid_working_hours_and_displays_error_message(self):
        response = self.client.post('/doctors', data={
            'Qualification': 'Doctor',
            'Specialisation': 'dematologist',
            'license_number': '12345',
            'working_hours': '',
            'availability': 'available',
            'Short_description': 'Lorem ipsum dolor sit amet'
        })
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'This field is required.')

    # Submits the form with invalid availability and displays error message.
    def test_submits_form_with_invalid_availability_and_displays_error_message(self):
        response = self.client.post('/doctors', data={
            'Qualification': 'Doctor',
            'Specialisation': 'dematologist',
            'license_number': '12345',
            'working_hours': '8-10',
            'availability': '',
            'Short_description': 'Lorem ipsum dolor sit amet'
        })
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'This field is required.')


class TestService:

    # The function should render the 'services.html' template.
    def test_render_template(self):
        with app.test_client() as client:
            response = client.get('/services')
            assert response.status_code == 200
            assert b'services.html' in response.data

    # The function should create an instance of the ServiceForm class.
    def test_create_instance(self):
        with app.test_client() as client:
            response = client.get('/services')
            assert isinstance(response.context['form'], ServiceForm)

    # The function should return the form object to the template.
    def test_return_form_object(self):
        with app.test_client() as client:
            response = client.get('/services')
            assert response.context['form'] == form

    # The function should handle GET and POST requests.
    def test_handle_requests(self):
        with app.test_client() as client:
            response = client.get('/services')
            assert response.status_code == 200

            response = client.post('/services')
            assert response.status_code == 200

    # The function should handle invalid form submissions.
    def test_handle_invalid_submissions(self):
        with app.test_client() as client:
            response = client.post('/services', data={'services': 'invalid'}, follow_redirects=True)
            assert b'Invalid input' in response.data

    # The function should handle empty form submissions.
    def test_handle_empty_submissions(self):
        with app.test_client() as client:
            response = client.post('/services', data={'services': ''}, follow_redirects=True)
            assert b'Field cannot be empty' in response.data