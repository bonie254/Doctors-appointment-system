
# Generated by CodiumAI

import pytest
from datetime import datetime
from models import Appointment, User,Doctor,Patient,Service

class TestUser:

    # Creating a new user with all required fields should successfully add the user to the database.
    def test_create_new_user_successfully(self):
        new_user = User(User_id='1', firstName='John', lastName='Doe', phone_number=1234567890, email='john.doe@example.com', user_type='admin', password='password')
        db.session.add(new_user)
        db.session.commit()
        retrieved_user = User.query.get('1')
        assert retrieved_user == new_user

    # Retrieving an existing user by their user_id should return the correct user object.
    def test_retrieve_existing_user_by_user_id(self):
        new_user = User(User_id='1', firstName='John', lastName='Doe', phone_number=1234567890, email='john.doe@example.com', user_type='admin', password='password')
        db.session.add(new_user)
        db.session.commit()
        retrieved_user = User.query.get('1')
        assert retrieved_user == new_user

    # Updating an existing user's email or password should successfully update the user's information in the database.
    def test_update_existing_user_email_and_password(self):
        new_user = User(User_id='1', firstName='John', lastName='Doe', phone_number=1234567890, email='john.doe@example.com', user_type='admin', password='password')
        db.session.add(new_user)
        db.session.commit()
        new_email = 'johndoe@example.com'
        new_password = 'newpassword'
        new_user.email = new_email
        new_user.password = new_password
        db.session.commit()
        retrieved_user = User.query.get('1')
        assert retrieved_user.email == new_email
        assert retrieved_user.password == new_password

    # Creating a new user with a phone number or email that already exists in the database should raise an error.
    def test_create_new_user_with_existing_phone_number(self):
        new_user = User(User_id='1', firstName='John', lastName='Doe', phone_number=1234567890, email='john.doe@example.com', user_type='admin', password='password')
        db.session.add(new_user)
        db.session.commit()
        duplicate_user = User(User_id='2', firstName='Jane', lastName='Smith', phone_number=1234567890, email='jane.smith@example.com', user_type='admin', password='password')
        db.session.add(duplicate_user)
        with pytest.raises(Exception):
            db.session.commit()

    # Creating a new user with a password that is too short or too long should raise an error.
    def test_create_new_user_with_invalid_password_length(self):
        short_password = 'pass'
        long_password = 'a' * 61
        with pytest.raises(Exception):
            new_user = User(User_id='1', firstName='John', lastName='Doe', phone_number=1234567890, email='john.doe@example.com', user_type='admin', password=short_password)
            db.session.add(new_user)
            db.session.commit()
        with pytest.raises(Exception):
            new_user = User(User_id='2', firstName='Jane', lastName='Smith', phone_number=1234567890, email='jane.smith@example.com', user_type='admin', password=long_password)
            db.session.add(new_user)
            db.session.commit()

    # Retrieving a non-existent user by their user_id should return None.
    def test_retrieve_nonexistent_user_by_user_id(self):
        retrieved_user = User.query.get('1')
        assert retrieved_user is None


class TestDoctor:

    # Create a new instance of Doctor with valid parameters
    def test_create_instance_valid_parameters(self):
        doctor = Doctor(Doctor_id='123', firstName='John', lastName='Doe', license_number=12345, clinic_name='ABC Clinic', clinic_address='123 Main St', email='john.doe@example.com', user_type='Doctor', password='password', working_hours='9-5', Short_description='Lorem ipsum')
    
        assert doctor.Doctor_id == '123'
        assert doctor.firstName == 'John'
        assert doctor.lastName == 'Doe'
        assert doctor.license_number == 12345
        assert doctor.clinic_name == 'ABC Clinic'
        assert doctor.clinic_address == '123 Main St'
        assert doctor.email == 'john.doe@example.com'
        assert doctor.user_type == 'Doctor'
        assert doctor.password == 'password'
        assert doctor.working_hours == '9-5'
        assert doctor.Short_description == 'Lorem ipsum'

    # Access the attributes of a Doctor instance
    def test_access_attributes(self):
        doctor = Doctor(Doctor_id='123', firstName='John', lastName='Doe', license_number=12345, clinic_name='ABC Clinic', clinic_address='123 Main St', email='john.doe@example.com', user_type='Doctor', password='password', working_hours='9-5', Short_description='Lorem ipsum')
    
        assert doctor.Doctor_id == '123'
        assert doctor.firstName == 'John'
        assert doctor.lastName == 'Doe'
        assert doctor.license_number == 12345
        assert doctor.clinic_name == 'ABC Clinic'
        assert doctor.clinic_address == '123 Main St'
        assert doctor.email == 'john.doe@example.com'
        assert doctor.user_type == 'Doctor'
        assert doctor.password == 'password'
        assert doctor.working_hours == '9-5'
        assert doctor.Short_description == 'Lorem ipsum'

    # Add a new Service to a Doctor instance
    def test_add_service(self):
        doctor = Doctor(Doctor_id='123', firstName='John', lastName='Doe', license_number=12345, clinic_name='ABC Clinic', clinic_address='123 Main St', email='john.doe@example.com', user_type='Doctor', password='password', working_hours='9-5', Short_description='Lorem ipsum')
        service = Service(service_id='456', doctor_id='123', service_name='Checkup')
    
        doctor.services.append(service)
    
        assert len(doctor.services) == 1
        assert doctor.services[0] == service

    # Create a new instance of Doctor with invalid parameters
    def test_create_instance_invalid_parameters(self):
        with pytest.raises(TypeError):
            doctor = Doctor(Doctor_id=123, firstName='John', lastName='Doe', license_number=12345, clinic_name='ABC Clinic', clinic_address='123 Main St', email='john.doe@example.com', user_type='Doctor', password='password', working_hours='9-5', Short_description='Lorem ipsum')

    # Add a new Service to a Doctor instance with invalid parameters
    def test_add_service_invalid_parameters(self):
        doctor = Doctor(Doctor_id='123', firstName='John', lastName='Doe', license_number=12345, clinic_name='ABC Clinic', clinic_address='123 Main St', email='john.doe@example.com', user_type='Doctor', password='password', working_hours='9-5', Short_description='Lorem ipsum')
    
        with pytest.raises(TypeError):
            service = Service(service_id=456, doctor_id=123, service_name='Checkup')
            doctor.services.append(service)

    # Add a new Patient to a Doctor instance with invalid parameters
    def test_add_patient_invalid_parameters(self):
        doctor = Doctor(Doctor_id='123', firstName='John', lastName='Doe', license_number=12345, clinic_name='ABC Clinic', clinic_address='123 Main St', email='john.doe@example.com', user_type='Doctor', password='password', working_hours='9-5', Short_description='Lorem ipsum')
    
        with pytest.raises(TypeError):
            patient = Patient(Patient_id=789, firstName='Jane', lastName='Smith', phone_number=5555555, email='jane.smith@example.com', user_type='Patient')
            doctor.patients.append(patient)


class TestPatient:

    # Creating a new patient with all required fields
    def test_create_patient_with_all_fields(self):
        patient = Patient(Patient_id='123', firstName='John', lastName='Doe', phone_number=1234567890, email='john.doe@example.com')
        assert patient.Patient_id == '123'
        assert patient.firstName == 'John'
        assert patient.lastName == 'Doe'
        assert patient.phone_number == 1234567890
        assert patient.email == 'john.doe@example.com'

    # Retrieving an existing patient by their ID
    def test_retrieve_existing_patient_by_id(self):
        patient = Patient(Patient_id='123', firstName='John', lastName='Doe', phone_number=1234567890, email='john.doe@example.com')
        db.session.add(patient)
        db.session.commit()
    
        retrieved_patient = Patient.query.get('123')
        assert retrieved_patient.Patient_id == '123'
        assert retrieved_patient.firstName == 'John'
        assert retrieved_patient.lastName == 'Doe'
        assert retrieved_patient.phone_number == 1234567890
        assert retrieved_patient.email == 'john.doe@example.com'

    # Updating a patient's information
    def test_update_patient_information(self):
        patient = Patient(Patient_id='123', firstName='John', lastName='Doe', phone_number=1234567890, email='john.doe@example.com')
        db.session.add(patient)
        db.session.commit()
    
        patient.firstName = 'Jane'
        patient.lastName = 'Smith'
        patient.phone_number = 9876543210
        patient.email = 'jane.smith@example.com'
        db.session.commit()
    
        updated_patient = Patient.query.get('123')
        assert updated_patient.Patient_id == '123'
        assert updated_patient.firstName == 'Jane'
        assert updated_patient.lastName == 'Smith'
        assert updated_patient.phone_number == 9876543210
        assert updated_patient.email == 'jane.smith@example.com'

    # Creating a patient with a phone number that already exists in the database
    def test_create_patient_with_existing_phone_number(self):
        patient1 = Patient(Patient_id='123', firstName='John', lastName='Doe', phone_number=1234567890, email='john.doe@example.com')
        db.session.add(patient1)
        db.session.commit()
    
        patient2 = Patient(Patient_id='456', firstName='Jane', lastName='Smith', phone_number=1234567890, email='jane.smith@example.com')
        db.session.add(patient2)
    
        with pytest.raises(Exception):
            db.session.commit()

    # Creating a patient with an email that already exists in the database
    def test_create_patient_with_existing_email(self):
        patient1 = Patient(Patient_id='123', firstName='John', lastName='Doe', phone_number=1234567890, email='john.doe@example.com')
        db.session.add(patient1)
        db.session.commit()
    
        patient2 = Patient(Patient_id='456', firstName='Jane', lastName='Smith', phone_number=9876543210, email='john.doe@example.com')
        db.session.add(patient2)
    
        with pytest.raises(Exception):
            db.session.commit()

    # Creating a patient with missing required fields
    def test_create_patient_with_missing_fields(self):
        with pytest.raises(Exception):
            patient = Patient(Patient_id='123', firstName='John', lastName='Doe')
            db.session.add(patient)
            db.session.commit()


class TestService:

    # Creating a new Service object with valid service_id, doctor_id, and service_name should successfully create a new Service instance.
    def test_create_new_service_instance(self):
        service = Service(service_id='123', doctor_id='456', service_name='Test Service')
        assert isinstance(service, Service)

    # Retrieving the doctor associated with a Service object should return the correct doctor object.
    def test_retrieve_associated_doctor(self):
        doctor = Doctor(Doctor_id='456', firstName='John', lastName='Doe', license_number=12345, clinic_name='Test Clinic', clinic_address='123 Test St', email='test@test.com', password='password', working_hours='9AM-5PM')
        service = Service(service_id='123', doctor_id='456', service_name='Test Service')
        assert service.doctor == doctor

    # Updating the service_name attribute of a Service object should successfully update the value of the attribute.
    def test_update_service_name(self):
        service = Service(service_id='123', doctor_id='456', service_name='Test Service')
        service.service_name = 'Updated Service'
        assert service.service_name == 'Updated Service'

    # Creating a new Service object with a service_id that already exists in the database should raise an IntegrityError.
    def test_duplicate_service_id(self):
        with pytest.raises(IntegrityError):
            service1 = Service(service_id='123', doctor_id='456', service_name='Test Service')
            service2 = Service(service_id='123', doctor_id='789', service_name='Another Service')

    # Creating a new Service object with a doctor_id that does not exist in the database should raise a ForeignKeyConstraintError.
    def test_invalid_doctor_id(self):
        with pytest.raises(ForeignKeyConstraintError):
            service = Service(service_id='123', doctor_id='999', service_name='Test Service')

    # Creating a new Service object with a service_name that is longer than 20 characters should raise a DataError.
    def test_long_service_name(self):
        with pytest.raises(DataError):
            service = Service(service_id='123', doctor_id='456', service_name='This is a very long service name that exceeds the maximum character limit')


class TestAppointment:

    # Creating a new appointment with valid appointment_id, appointment_date, appointment_time, Doctor_id, client_id, and service
    def test_create_appointment_with_valid_data(self):
        appointment = Appointment(appointment_id='123', appointment_date=datetime.utcnow(), appointment_time='8-10', Doctor_id='doc123', client_id='pat123', service='checkup')
        assert appointment.appointment_id == '123'
        assert appointment.appointment_date == datetime.utcnow()
        assert appointment.appointment_time == '8-10'
        assert appointment.Doctor_id == 'doc123'
        assert appointment.client_id == 'pat123'
        assert appointment.service == 'checkup'

    # Retrieving an existing appointment with valid appointment_id
    def test_retrieve_existing_appointment(self):
        appointment = Appointment.query.get('123')
        assert appointment is not None

    # Updating an existing appointment with valid appointment_id and updated appointment_date, appointment_time, Doctor_id, client_id, and service
    def test_update_existing_appointment(self):
        appointment = Appointment.query.get('123')
        appointment.appointment_date = datetime.utcnow()
        appointment.appointment_time = '10-12'
        appointment.Doctor_id = 'doc456'
        appointment.client_id = 'pat456'
        appointment.service = 'follow-up'
        db.session.commit()
        updated_appointment = Appointment.query.get('123')
        assert updated_appointment.appointment_date == datetime.utcnow()
        assert updated_appointment.appointment_time == '10-12'
        assert updated_appointment.Doctor_id == 'doc456'
        assert updated_appointment.client_id == 'pat456'
        assert updated_appointment.service == 'follow-up'

    # Creating a new appointment with missing appointment_id
    def test_create_appointment_with_missing_appointment_id(self):
        with pytest.raises(TypeError):
            appointment = Appointment(appointment_date=datetime.utcnow(), appointment_time='8-10', Doctor_id='doc123', client_id='pat123', service='checkup')

    # Creating a new appointment with missing appointment_date
    def test_create_appointment_with_missing_appointment_date(self):
        with pytest.raises(TypeError):
            appointment = Appointment(appointment_id='123', appointment_time='8-10', Doctor_id='doc123', client_id='pat123', service='checkup')

    # Creating a new appointment with missing appointment_time
    def test_create_appointment_with_missing_appointment_time(self):
        with pytest.raises(TypeError):
            appointment = Appointment(appointment_id='123', appointment_date=datetime.utcnow(), Doctor_id='doc123', client_id='pat123', service='checkup')